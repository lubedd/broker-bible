// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	AddMessage(ctx context.Context, in *RequestProducer, opts ...grpc.CallOption) (*ResponseProducer, error)
	ConsumerChat(ctx context.Context, opts ...grpc.CallOption) (Broker_ConsumerChatClient, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) AddMessage(ctx context.Context, in *RequestProducer, opts ...grpc.CallOption) (*ResponseProducer, error) {
	out := new(ResponseProducer)
	err := c.cc.Invoke(ctx, "/broker.Broker/AddMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) ConsumerChat(ctx context.Context, opts ...grpc.CallOption) (Broker_ConsumerChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Broker_serviceDesc.Streams[0], "/broker.Broker/ConsumerChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerConsumerChatClient{stream}
	return x, nil
}

type Broker_ConsumerChatClient interface {
	Send(*Consumer) error
	Recv() (*Consumer, error)
	grpc.ClientStream
}

type brokerConsumerChatClient struct {
	grpc.ClientStream
}

func (x *brokerConsumerChatClient) Send(m *Consumer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerConsumerChatClient) Recv() (*Consumer, error) {
	m := new(Consumer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility
type BrokerServer interface {
	AddMessage(context.Context, *RequestProducer) (*ResponseProducer, error)
	ConsumerChat(Broker_ConsumerChatServer) error
}

// UnimplementedBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (*UnimplementedBrokerServer) AddMessage(context.Context, *RequestProducer) (*ResponseProducer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMessage not implemented")
}
func (*UnimplementedBrokerServer) ConsumerChat(Broker_ConsumerChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumerChat not implemented")
}
func (*UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_AddMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestProducer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).AddMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.Broker/AddMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).AddMessage(ctx, req.(*RequestProducer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_ConsumerChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).ConsumerChat(&brokerConsumerChatServer{stream})
}

type Broker_ConsumerChatServer interface {
	Send(*Consumer) error
	Recv() (*Consumer, error)
	grpc.ServerStream
}

type brokerConsumerChatServer struct {
	grpc.ServerStream
}

func (x *brokerConsumerChatServer) Send(m *Consumer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerConsumerChatServer) Recv() (*Consumer, error) {
	m := new(Consumer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMessage",
			Handler:    _Broker_AddMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumerChat",
			Handler:       _Broker_ConsumerChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "broker.proto",
}
